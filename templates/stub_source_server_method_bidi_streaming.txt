::grpc::Status $Service$ServiceImpl::$Method$(
    ::grpc::ServerContext* context,
    ::grpc::ServerReaderWriter<$Response$, $Request$>* serverStream,
    $Response$* response
) {
    std::string dataset_name_with_dot = getDatasetName(context);

    // 1) Full replace the result message: read JSON text from file specified in `config.xml` in `full` tag
    if (Config::instance().haveFullPath(path)) {
        std::string full_path = Config::instance().fullPath(path);
        std::string full_data = grpc_mock_server::readFile(full_path);
        auto status_util = google::protobuf::util::JsonStringToMessage(full_data, response);
        if (status_util.ok()) {
            SystemLogger->info("{}: full response override succeeded", method_display_name);
            return fromUtilStatus(status_util);
        } else {
            SystemLogger->error("{}: full: unable to read file '{}'", method_display_name, full_path);
            return grpc::Status(grpc::INTERNAL, "unable to read full file");
        }
    }
    // 2) Partial replace the result message: read DSL program from file specified in `config.xml` in `partial` tag
    else if (Config::instance().havePartialPath(path)) {
        std::string partial_path = Config::instance().partialPath(path);

        grpc::ClientContext client_context;
        std::shared_ptr<::grpc::ClientReaderWriter<$Request$, $Response$>> client_stream(m_stub->$Method$(&client_context));

        $Request$ request;
        while (server_stream->Read(&request)) {
            std::unique_lock<std::mutex> lock(m_mutex);
            std::string request_json = message_as_json(request);
            grpcMockServerMethodCallback($UnixTime$, "$Package$$Service$/$Method$", request_json, grpc::Status::OK.error_code(), "");
            if (!client_stream->Write(request)) {
                // Broken stream
                break;
            }
        }
        server_stream->WritesDone();

        $Response$ response;
        while (client_stream->Read(&response)) {
            std::unique_lock<std::mutex> lock(m_mutex);
            evalRequest(*response, partial_path);
            std::string response_json = message_as_json(response);
            grpcMockServerMethodCallback($UnixTime$, "$Package$$Service$/$Method$", "", grpc::Status::OK.error_code(), response_json);
            serverStream->Write(response);
        }

        auto status = client_stream->Finish();
        if (status.ok()) {
            SystemLogger->info("{}: partial response override succeeded", method_display_name);
        } else {
            SystemLogger->info("{}: partial: unable to override failed response", method_display_name);
        }
        return status;
    }
    // 3) No replace: call the remote server method and forward it's result
    // TODO: implement offline mode
    else {
        grpc::ClientContext client_context;
        std::shared_ptr<::grpc::ClientReaderWriter<$Request$, $Response$>> client_stream(m_stub->$Method$(&client_context));

        $Request$ request;
        while (server_stream->Read(&request)) {
            std::unique_lock<std::mutex> lock(m_mutex);
            std::string request_json = message_as_json(request);
            grpcMockServerMethodCallback($UnixTime$, "$Package$$Service$/$Method$", request_json, grpc::Status::OK.error_code(), "");
            if (!client_stream->Write(request)) {
                // Broken stream
                break;
            }
        }
        server_stream->WritesDone();

        $Response$ response;
        while (client_stream->Read(&response)) {
            std::unique_lock<std::mutex> lock(m_mutex);
            std::string response_json = message_as_json(response);
            grpcMockServerMethodCallback($UnixTime$, "$Package$$Service$/$Method$", "", grpc::Status::OK.error_code(), response_json);
            serverStream->Write(response);
        }

        auto status = client_stream->Finish();
        grpcMockServerMethodCallback($UnixTime$, "$Package$$Service$/$Method$", "", status.error_code(), "");
        return status;
    }
}
